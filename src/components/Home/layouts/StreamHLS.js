import React, { useState, useEffect } from 'react';
import { Typography, Container} from '@material-ui/core';
import Button from './../../../atoms/button.js';

import { AirplayOutlined, PlaylistPlayOutlined, FolderOutlined, OpenInBrowserOutlined } from '@material-ui/icons';

import FlavouredInput from '../gadgets/FlavouredInput.js'
import { useStreams } from '../../../providers/streams-context.js';
import Loader from '../gadgets/Loader.js';

import { channels } from '../../../shared/constants.js';

import ExpansionPanel from '@material-ui/core/ExpansionPanel';
import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';
import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import Checkbox from '@material-ui/core/Checkbox';

const { dialog, currentWindow, shell, ipcRenderer } = window;


export default function StreamHLS({ history, handleError }) {
    const Streams = useStreams();
    const [streamToken, setStreamToken] = useState("");
    const [recordingFolder, setRecordingFolder] = useState("");
    const [userWorkingDirectory, setUserWorkingDirectory] = useState("");
    const [loading, setLoading] = useState(false);
    const [errors, setErrors] = useState(false)
    const [keepFiles, setKeepFiles] = React.useState(true);

    const handleCreateStream = (e) => {
        e.preventDefault();
        let currentErrors = {};
        let hasErrors = false;
        if (!streamToken) {
            currentErrors.token = "Cannot be empty";
            hasErrors = true;
        }

        if (!recordingFolder) {
            currentErrors.dir = "Cannot be empty";
            hasErrors = true;
        }

        if (hasErrors) {
            setErrors(currentErrors);
            return;
        }

        setErrors(false);
        setLoading(true);
        Streams.createHlsStream(streamToken, recordingFolder, keepFiles).then(()=>history.push('/stream/'+streamToken)).catch(handleError).finally(() => setLoading(false));
    }

    const showDirectoryDialogBox = () => {
        setRecordingFolder(dialog.showOpenDialogSync(currentWindow, { properties: ['openDirectory'] }));
    }

    const showInDirectory = () => {
        shell.openExternal('file://'+userWorkingDirectory) // ~/.SkyLive is the working directory path.
    }

    useEffect(()=> {
        ipcRenderer.send(channels.USER_WORKING_DIRECTORY);
        const listener = (event, dir) => {
            setUserWorkingDirectory(dir);
        }
        ipcRenderer.on(channels.USER_WORKING_DIRECTORY, listener);

        return ()=>ipcRenderer.removeListener(channels.USER_WORKING_DIRECTORY, listener);
    }, []);


    return <>
        <Loader open={loading}/>
        <Container maxWidth='lg' style={{ height: '100%', display: 'flex', flexDirection: 'column', paddingTop: 20 }}>
            <div style={{ display: 'flex', alignItems: 'center' }}>
                <PlaylistPlayOutlined /> <Typography variant="h6" style={{ paddingLeft: 10 }}>Stream (HLS)</Typography>
            </div>
            <Container maxWidth='lg' style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                <Typography variant="body1" style={{ flex: 1 }}>
                    Broadcast HLS (also known as m3u8) video stream.
                    <Button color="default" onClick={() => shell.openExternal("https://github.com/DaWe35/Skylive#setup-obs")}>
                        OBS setup guide
                    </Button>
                </Typography>

                <form style={{ display: 'flex', flexDirection: 'column', flex: 9 }}>
                    <div style={{ display: 'flex', flexDirection: 'column', flex: 1, justifyContent: 'space-around' }}>
                        <FlavouredInput value={streamToken} onChange={setStreamToken} error={errors ? errors.token : false} label="Stream Token" tooltip="Stream token generated by SkyLive. If you have no stream token, you need to register on SkyLive.CoolHD.hu and create a new stream." />
                        <FlavouredInput value={recordingFolder} onChange={setRecordingFolder} error={errors ? errors.dir : false} label="Recording Folder" tooltip="Select the folder where you will record  the HLS (or m3u8) format video"
                            endAdornment={{
                                icon: FolderOutlined,
                                onClick: showDirectoryDialogBox
                            }}
                        />
                        <div style={{ marginTop: '10px' }}>
                            <ExpansionPanel>
                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} aria-controls="panel1a-content" id="panel1a-header">
                                    <Typography>Advanced</Typography>
                                </ExpansionPanelSummary>
                                <ExpansionPanelDetails>
                                    <FormControlLabel control={<Checkbox checked={keepFiles} onChange={(event)=>setKeepFiles(event.target.checked)} name="keepFiles" color="primary"/>} label="Keep video files on disk" />
                                    <Button color='primary' onClick={ showInDirectory } startIcon={<OpenInBrowserOutlined />} variant="outlined">Open working directory</Button>
                                </ExpansionPanelDetails>
                            </ExpansionPanel>
                        </div>
                    </div>
                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-end', marginBottom: 30, width: '100%', flex: 1 }}>
                        <Button type="submit" color='primary' onClick={handleCreateStream} startIcon={<AirplayOutlined />} variant="outlined" size="large">Start Stream</Button>
                    </div>
                </form>
            </Container>
        </Container>
    </>
}